<fc> ::= <deff>{::}<callf>

<deff> ::= def fun(price_data):{::}
{:import vectorbt as vbt:}{::}
{:import pandas as pd:}{::}
{:import numpy as np:}{::}
{:from fitness.indicators import signals:}{::}
{:from fitness.performance.helper_func import merge_buy_sell_pnl, get_drawdowns, get_pnl, get_lag:}{::}
{:from fitness.performance.helper_func import trading_signals_buy, trading_signals_sell, change_exit:}{::}
{:from numba import njit:}{::}
{:COMMISSION = 0.015:}{::}
{:SLIPPAGE = 0.00005:}{::}
{:AVAILABLE_CAPITAL = 100000:}{::}
{:TRADE_SIZE = 0.1:}{::}{::}
{:buy_idxs, buy_exit_idxs = trading_signals_buy(buy_signal=<buy-signal>, exit_signal=<buy-exit-signal>):}{::}
{:sell_idxs, sell_exit_idxs = trading_signals_sell(sell_signal=<sell-signal>, exit_signal=<sell-exit-signal>):}{::}
{:try::}
{:{:buy_idxs, buy_exit_idxs, sell_idxs, sell_exit_idxs = change_exit(buy_idxs, buy_exit_idxs, sell_idxs, sell_exit_idxs):}:}{::}
{:except::}
{:{:pass:}:}
{:if (len(buy_idxs) == 0 or len(buy_exit_idxs) == 0) and (len(sell_idxs) == 0 or len(sell_exit_idxs) == 0)::}{::}
{:{:return 999:}:}{::}{::}
{:buy_entries = np.array([1 if i in buy_idxs else 0 for i in range(len(price_data["'"usdchf_open"'"]))]):}{::}
{:sell_entries = np.array([1 if i in sell_idxs else 0 for i in range(len(price_data["'"usdchf_open"'"]))]):}{::}
{:buy_exits = np.array([1 if i in buy_exit_idxs else 0 for i in range(len(price_data["'"usdchf_open"'"]))]):}{::}
{:sell_exits = np.array([1 if i in sell_exit_idxs else 0 for i in range(len(price_data["'"usdchf_open"'"]))]):}{::}
{:price_data_open = pd.Series(price_data["'"usdchf_open"'"], index=pd.to_datetime(price_data["'"datetime"'"])):}{::}
{:pf = vbt.Portfolio.from_signals(price_data_open, entries=buy_entries, exits=buy_exits, init_cash=AVAILABLE_CAPITAL, fees=COMMISSION, slippage=SLIPPAGE, size=TRADE_SIZE, short_entries=sell_entries, short_exits=sell_exits):}{::}
{:fitness = pf.stats()["'"Total Return [%]"'"]:}{::}
{:if np.isnan(fitness)::}{::}
{:{:return 999:}:}{::}
{:return -fitness:}

<callf> ::= fitness = fun(price_data)

<var> ::= price_data["'"<data-prices>"'"]
| get_lag(price_data["'"<data-prices>"'"], lag=<lag-steps>)

<data-prices> ::= <close-prices> | <open-prices> | <high-prices> | <low-prices>

<inst-tickers> ::= audusd | eurusd | gbpusd | nzdusd | usdcad | usdchf | usdcnh 
| usdczk | usddkk | usdhkd | usdhuf | usdils | usdjpy | usdmxn | usdnok | usdpln 
| usdrmb | usdrub | usdrur | usdsek | usdsgd | usdthb | usdtry | usdzar | xagusd 
| xauusd | xpdusd | xptusd

<close-prices> ::= <inst-tickers>_close

<open-prices> ::= <inst-tickers>_open

<high-prices> ::= <inst-tickers>_high

<low-prices> ::= <inst-tickers>_low

<simple-signal> ::= (<var> <c-op> <var>)
| ((<var> <mat-op> <var>) <c-op> <var>)
| (<mat-f> <c-op> <mat-f>)
| ((<mat-f> <mat-op> <mat-f>) <c-op> <mat-f>)
| (<var> <c-op> <mat-f>)
| ((<var> <mat-op> <mat-f>) <c-op> <var>)
| ((<var> <mat-op> <mat-f>) <c-op> <mat-f>)

<signal> ::= <simple-signal> | (<simple-signal> <log-op> <simple-signal>)
| (<simple-signal> <log-op> <simple-signal> <log-op> <simple-signal>)

<sell-signal> ::= <signal>

<buy-signal> ::= <signal>

<sell-exit-signal> ::= <signal>

<buy-exit-signal> ::= <signal>

<lag-steps> ::= <digit> | <digit><aug-digit> | <digit><aug-digit><aug-digit> | <digit><aug-digit><aug-digit><aug-digit>

<digit> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<aug-digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 

<c-op> ::= ">=" | "<="

<mat-op> ::= + | - | * | /

<log-op> ::= "&" | "|" 

<mat-f> ::= np.log(<var> + 1) | np.sin(<var>) | np.cos(<var>) | np.sqrt(<var>)
| np.log10(<var> + 1) | np.log2(<var> + 1) | np.log1p(<var> + 1) | np.abs(<var>) | np.max(<var>) | np.min(<var>)