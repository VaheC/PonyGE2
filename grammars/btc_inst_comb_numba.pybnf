<fc> ::= <deff>{::}<callf>

<deff> ::= def fun(price_data):{::}
{:import pandas as pd:}{::}
{:import numpy as np:}{::}
{:from fitness.indicators import numba_indicators:}{::}
{:from fitness.performance.helper_func import merge_pnl, get_drawdowns, get_pnl, trading_signals, get_lag:}{::}
{:from numba import njit:}{::}
{:COMMISSION = 0.015:}{::}
{:SLIPPAGE = 0.00005:}{::}
{:AVAILABLE_CAPITAL = 700000:}{::}
{:TRADE_SIZE = 0.5:}{::}{::}
{:MAX_LAG = 5:}{::}{::}
{:buy_idxs, sell_idxs = trading_signals(buy_signal=<signal>, sell_signal=<signal>):}{::}
{:if len(buy_idxs) == 0 or len(sell_idxs) == 0::}{::}
{:{:return 999:}:}{::}{::}
{:buy_idxs = np.array(buy_idxs):}{::}
{:sell_idxs = np.array(sell_idxs):}{::}
{:open_prices = price_data["'"btc_open"'"]:}{::}
{:buy_prices = open_prices[np.isin(np.arange(len(open_prices)), buy_idxs)]:}{::}
{:sell_prices = open_prices[np.isin(np.arange(len(open_prices)), sell_idxs)]:}{::}
{:if buy_idxs[0] < sell_idxs[0]::}{::}
{:{:buy_arr = get_pnl(sell_prices, buy_prices, COMMISSION, SLIPPAGE, AVAILABLE_CAPITAL, TRADE_SIZE, 1):}:}
{:{:buy_pnl = np.sum(buy_arr):}:}{::}
{:{:sell_arr = get_pnl(buy_prices[1:], sell_prices[:-1], COMMISSION, SLIPPAGE, AVAILABLE_CAPITAL, TRADE_SIZE, 0):}:}{::}
{:{:sell_pnl = np.sum(sell_arr):}:}{::}
{:{:all_arr = merge_pnl(buy_arr, sell_arr):}:}{::}
{:else::}{::}
{:{:sell_arr = get_pnl(buy_prices, sell_prices, COMMISSION, SLIPPAGE, AVAILABLE_CAPITAL, TRADE_SIZE, 0):}:}{::}
{:{:sell_pnl = np.sum(sell_arr):}:}{::}
{:{:buy_arr = get_pnl(sell_prices[1:], buy_prices[:-1], COMMISSION, SLIPPAGE, AVAILABLE_CAPITAL, TRADE_SIZE, 1):}:}
{:{:buy_pnl = np.sum(buy_arr):}:}{::}
{:{:all_arr = merge_pnl(sell_arr, buy_arr):}:}{::}{::}
{:total_pnl = buy_pnl + sell_pnl:}{::}
{:if total_pnl <= 0::}{::}
{:{:return 999:}:}{::}
{:equity_curve_arr = np.cumsum(all_arr):}{::}
{:drawdowns = get_drawdowns(equity_curve_arr):}{::}
{:if len(drawdowns[drawdowns!=0]) == 0::}{::}
{:{:return 999:}:}{::}
{:avg_drawdown = np.sum(drawdowns[drawdowns!=0]) / len(drawdowns[drawdowns!=0]):}{::}
{:fitness = total_pnl / avg_drawdown:}{::}
{:if np.isnan(fitness)::}{::}
{:{:return 999:}:}{::}
{:return -fitness:}

<callf> ::= fitness = fun(price_data)

<var> ::= price_data["'"<close-prices>"'"][MAX_LAG:]
| price_data["'"<open-prices>"'"][MAX_LAG:]
| price_data["'"<high-prices>"'"][MAX_LAG:]
| price_data["'"<low-prices>"'"][MAX_LAG:]
| price_data["'"<volume>"'"][MAX_LAG:]
| get_lag(price_data["'"<close-prices>"'"], lag=1)[MAX_LAG:]
| get_lag(price_data["'"<open-prices>"'"], lag=1)[MAX_LAG:]
| get_lag(price_data["'"<high-prices>"'"], lag=1)[MAX_LAG:]
| get_lag(price_data["'"<low-prices>"'"], lag=1)[MAX_LAG:]
| get_lag(price_data["'"<volume>"'"], lag=1)[MAX_LAG:]
| get_lag(price_data["'"<close-prices>"'"], lag=2)[MAX_LAG:]
| get_lag(price_data["'"<open-prices>"'"], lag=2)[MAX_LAG:]
| get_lag(price_data["'"<high-prices>"'"], lag=2)[MAX_LAG:]
| get_lag(price_data["'"<low-prices>"'"], lag=2)[MAX_LAG:]
| get_lag(price_data["'"<volume>"'"], lag=2)[MAX_LAG:]
| get_lag(price_data["'"<close-prices>"'"], lag=3)[MAX_LAG:]
| get_lag(price_data["'"<open-prices>"'"], lag=3)[MAX_LAG:]
| get_lag(price_data["'"<high-prices>"'"], lag=3)[MAX_LAG:]
| get_lag(price_data["'"<low-prices>"'"], lag=3)[MAX_LAG:]
| get_lag(price_data["'"<volume>"'"], lag=3)[MAX_LAG:]
| get_lag(price_data["'"<close-prices>"'"], lag=4)[MAX_LAG:]
| get_lag(price_data["'"<open-prices>"'"], lag=4)[MAX_LAG:]
| get_lag(price_data["'"<high-prices>"'"], lag=4)[MAX_LAG:]
| get_lag(price_data["'"<low-prices>"'"], lag=4)[MAX_LAG:]
| get_lag(price_data["'"<volume>"'"], lag=4)[MAX_LAG:]
| get_lag(price_data["'"<close-prices>"'"], lag=5)[MAX_LAG:]
| get_lag(price_data["'"<open-prices>"'"], lag=5)[MAX_LAG:]
| get_lag(price_data["'"<high-prices>"'"], lag=5)[MAX_LAG:]
| get_lag(price_data["'"<low-prices>"'"], lag=5)[MAX_LAG:]
| get_lag(price_data["'"<volume>"'"], lag=5)[MAX_LAG:]

<close-prices> ::= btc_close | 6e_close | aapl_close | aav_close | amzn_close 
| cl_close | coin_close | dog_close | es_close | fet_close | gc_close 
| googl_close | inj_close | lin_close | meta_close | msft_close | ng_close 
| nq_close | nvda_close | pltr_close | sui_close | tia_close | tsla_close | xrp_close | zf_close | zn_close

<open-prices> ::= btc_open | 6e_open | aapl_open | aav_open | amzn_open 
| cl_open | coin_open | dog_open | es_open | fet_open | gc_open 
| googl_open | inj_open | lin_open | meta_open | msft_open | ng_open 
| nq_open | nvda_open | pltr_open | sui_open | tia_open | tsla_open | xrp_open | zf_open | zn_open

<high-prices> ::= btc_high | 6e_high | aapl_high | aav_high | amzn_high 
| cl_high | coin_high | dog_high | es_high | fet_high | gc_high 
| googl_high | inj_high | lin_high | meta_high | msft_high | ng_high 
| nq_high | nvda_high | pltr_high | sui_high | tia_high | tsla_high | xrp_high | zf_high | zn_high

<low-prices> ::= btc_low | 6e_low | aapl_low | aav_low | amzn_low 
| cl_low | coin_low | dog_low | es_low | fet_low | gc_low 
| googl_low | inj_low | lin_low | meta_low | msft_low | ng_low 
| nq_low | nvda_low | pltr_low | sui_low | tia_low | tsla_low | xrp_low | zf_low | zn_low

<volume> ::= btc_volume | 6e_volume | aapl_volume | aav_volume | amzn_volume 
| cl_volume | coin_volume | dog_volume | es_volume | fet_volume | gc_volume 
| googl_volume | inj_volume | lin_volume | meta_volume | msft_volume | ng_volume 
| nq_volume | nvda_volume | pltr_volume | sui_volume | tia_volume | tsla_volume | xrp_volume | zf_volume | zn_volume

<signal> ::= <var> <c-op> <value> | (<signal>) <log-op> (<signal>)
| <var> <c-op> <var>
| (<var> <mat-op> <var>) <c-op> <value>
| (<var> <mat-op> <value>) <c-op> <value>
| <mat-f> <c-op> <mat-f>
| <mat-f> <c-op> <value>
| (<mat-f> <mat-op> <mat-f>) <c-op> <value>
| (<mat-f> <mat-op> <value>) <c-op> <value>

<value> ::= <int-const> | <real-const>

<int-const> ::= <digit><digit><digit><digit><digit> | <digit><digit> | <digit><digit><digit> | <digit>0 | <digit><digit>0 | <digit>00 | <digit>0<digit>
<digit> ::= | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<real-const> ::= 0.<int-const> | <int-const>.<int-const>

<c-op> ::= ">=" | "<=" | ">" | "<" | "==" | "!="

<mat-op> ::= + | - | * | / | // | % | **

<log-op> ::= "&" | "|" 

<mat-f> ::= np.log(<var>) | np.sin(<var>) | np.cos(<var>) | np.sqrt(<var>)