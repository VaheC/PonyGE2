<fc> ::= <deff>{::}<callf>

<deff> ::= def fun(price_data):{::}
{:import pandas as pd:}{::}
{:import numpy as np:}{::}
{:from fitness.indicators import numba_indicators:}{::}
{:from fitness.performance.helper_func import merge_pnl, get_drawdowns, get_pnl, trading_signals, get_lag:}{::}
{:from numba import njit:}{::}
{:COMMISSION = 0.015:}{::}
{:SLIPPAGE = 0.00005:}{::}
{:AVAILABLE_CAPITAL = 700000:}{::}
{:TRADE_SIZE = 0.5:}{::}{::}
{:MAX_LAG = 5:}{::}{::}
{:buy_idxs, sell_idxs = trading_signals(buy_signal=<signal>, sell_signal=<signal>):}{::}
{:if len(buy_idxs) == 0 or len(sell_idxs) == 0::}{::}
{:{:return 999:}:}{::}{::}
{:buy_idxs = np.array(buy_idxs):}{::}
{:sell_idxs = np.array(sell_idxs):}{::}
{:open_prices = price_data["'"btc_open"'"]:}{::}
{:buy_prices = open_prices[np.isin(np.arange(len(open_prices)), buy_idxs)]:}{::}
{:sell_prices = open_prices[np.isin(np.arange(len(open_prices)), sell_idxs)]:}{::}
{:if buy_idxs[0] < sell_idxs[0]::}{::}
{:{:buy_arr = get_pnl(sell_prices, buy_prices, COMMISSION, SLIPPAGE, AVAILABLE_CAPITAL, TRADE_SIZE, 1):}:}
{:{:buy_pnl = np.sum(buy_arr):}:}{::}
{:{:sell_arr = get_pnl(buy_prices[1:], sell_prices[:-1], COMMISSION, SLIPPAGE, AVAILABLE_CAPITAL, TRADE_SIZE, 0):}:}{::}
{:{:sell_pnl = np.sum(sell_arr):}:}{::}
{:{:all_arr = merge_pnl(buy_arr, sell_arr):}:}{::}
{:else::}{::}
{:{:sell_arr = get_pnl(buy_prices, sell_prices, COMMISSION, SLIPPAGE, AVAILABLE_CAPITAL, TRADE_SIZE, 0):}:}{::}
{:{:sell_pnl = np.sum(sell_arr):}:}{::}
{:{:buy_arr = get_pnl(sell_prices[1:], buy_prices[:-1], COMMISSION, SLIPPAGE, AVAILABLE_CAPITAL, TRADE_SIZE, 1):}:}
{:{:buy_pnl = np.sum(buy_arr):}:}{::}
{:{:all_arr = merge_pnl(sell_arr, buy_arr):}:}{::}{::}
{:total_pnl = buy_pnl + sell_pnl:}{::}
{:if total_pnl <= 0::}{::}
{:{:return 999:}:}{::}
{:equity_curve_arr = np.cumsum(all_arr):}{::}
{:drawdowns = get_drawdowns(equity_curve_arr):}{::}
{:if len(drawdowns[drawdowns!=0]) == 0::}{::}
{:{:return 999:}:}{::}
{:avg_drawdown = np.sum(drawdowns[drawdowns!=0]) / len(drawdowns[drawdowns!=0]):}{::}
{:fitness = total_pnl / avg_drawdown:}{::}
{:if np.isnan(fitness)::}{::}
{:{:return 999:}:}{::}
{:return -fitness:}

<callf> ::= fitness = fun(price_data)

<var> ::= price_data["'"<close-prices>"'"][MAX_LAG:]
| price_data["'"<open-prices>"'"][MAX_LAG:]
| price_data["'"<high-prices>"'"][MAX_LAG:]
| price_data["'"<low-prices>"'"][MAX_LAG:]
| price_data["'"<volume>"'"][MAX_LAG:]
| get_lag(price_data["'"<close-prices>"'"], lag=1)[MAX_LAG:]
| get_lag(price_data["'"<open-prices>"'"], lag=1)[MAX_LAG:]
| get_lag(price_data["'"<high-prices>"'"], lag=1)[MAX_LAG:]
| get_lag(price_data["'"<low-prices>"'"], lag=1)[MAX_LAG:]
| get_lag(price_data["'"<volume>"'"], lag=1)[MAX_LAG:]
| get_lag(price_data["'"<close-prices>"'"], lag=2)[MAX_LAG:]
| get_lag(price_data["'"<open-prices>"'"], lag=2)[MAX_LAG:]
| get_lag(price_data["'"<high-prices>"'"], lag=2)[MAX_LAG:]
| get_lag(price_data["'"<low-prices>"'"], lag=2)[MAX_LAG:]
| get_lag(price_data["'"<volume>"'"], lag=2)[MAX_LAG:]
| get_lag(price_data["'"<close-prices>"'"], lag=3)[MAX_LAG:]
| get_lag(price_data["'"<open-prices>"'"], lag=3)[MAX_LAG:]
| get_lag(price_data["'"<high-prices>"'"], lag=3)[MAX_LAG:]
| get_lag(price_data["'"<low-prices>"'"], lag=3)[MAX_LAG:]
| get_lag(price_data["'"<volume>"'"], lag=3)[MAX_LAG:]
| get_lag(price_data["'"<close-prices>"'"], lag=4)[MAX_LAG:]
| get_lag(price_data["'"<open-prices>"'"], lag=4)[MAX_LAG:]
| get_lag(price_data["'"<high-prices>"'"], lag=4)[MAX_LAG:]
| get_lag(price_data["'"<low-prices>"'"], lag=4)[MAX_LAG:]
| get_lag(price_data["'"<volume>"'"], lag=4)[MAX_LAG:]
| get_lag(price_data["'"<close-prices>"'"], lag=5)[MAX_LAG:]
| get_lag(price_data["'"<open-prices>"'"], lag=5)[MAX_LAG:]
| get_lag(price_data["'"<high-prices>"'"], lag=5)[MAX_LAG:]
| get_lag(price_data["'"<low-prices>"'"], lag=5)[MAX_LAG:]
| get_lag(price_data["'"<volume>"'"], lag=5)[MAX_LAG:]

<close-prices> ::= btc_close | eth_close
<open-prices> ::= btc_open | eth_open
<high-prices> ::= btc_high | eth_high
<low-prices> ::= btc_low | eth_low
<volume> ::= btc_volume | eth_volume

<signal> ::= <var> <c-op> <value> | (<signal>) <log-op> (<signal>)
| <var> <c-op> <var>
| (<var> <mat-op> <var>) <c-op> <value>
| (<var> <mat-op> <value>) <c-op> <value>
| <mat-f> <c-op> <mat-f>
| <mat-f> <c-op> <value>
| (<mat-f> <mat-op> <mat-f>) <c-op> <value>
| (<mat-f> <mat-op> <value>) <c-op> <value>

<value> ::= <int-const> | <real-const>

<int-const> ::= <digit><digit><digit><digit><digit> | <digit><digit> | <digit><digit><digit> | <digit>0 | <digit><digit>0 | <digit>00 | <digit>0<digit>
<digit> ::= | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<real-const> ::= 0.<int-const> | <int-const>.<int-const>

<c-op> ::= ">=" | "<=" | ">" | "<" | "==" | "!="

<mat-op> ::= + | - | * | / | // | % | **

<log-op> ::= "&" | "|" 

<mat-f> ::= np.log(<var>) | np.sin(<var>) | np.cos(<var>)